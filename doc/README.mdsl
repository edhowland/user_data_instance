h1 'user_data_instance'
para %q{User data is for passing metadata or runtime init scripts to instance creation in cloud services like AWS or Digital Ocean.}


h2 'TODO'

numbers 'Create SSH keys',
'Add to Github (publicey)',
'Create init script to add to user/.ssh',
'Create user data multipart file',
'Make init script to git clone this repo from GitHub'


h2 'Installation'

code %q{
  $ sudo apt-get install cloud-init cloud-utils
}


h2 'Create User Data multipart file'

para %q{After creating your script to be run one time after instance creation,
and copying your private key to be used for git clone,
you wil need to combine them in a MIME Multipart file. The program to do this is
'write-mime-multipart' supplied in the 'cloud-utils' package in Ubuntu
you installed above.
}
para %q{Here is how to run this:}

code %q{

$ cd scripts/
$ ls
first-time.sh
git.rsa
$ write-mime-multipart  first-time.sh  git.rsa  -o data.mp
$ ls
data.mp
first-time.sh
git.rsa
$ 

$ cd scripts/
$ ls
first-time.sh
git.rsa
$ write-mime-multipart  first-time.sh  git.rsa  -o data.mp
$ ls
data.mp
first-time.sh
git.rsa
```}

h2 'Embedding MIME multipart in JSON file for curl '

para %q{After you have a created a MIME multipart file (E.g. scripts/data.mp in this case),
you can embed it in a .json file:}

code %q{
  $ ./embed-mime-json.rb -j input.json -m scriptes/data.mp -o output.json
}

h2 'Modify any key in a JSON file'

para %q{You can modify any key in a .json file with the 'modify-json.rb'.
It takes a input file, output file and a single key value pair.
You can use it to  inspect all the keys in the input file with --verbose option.}

code %q{
./modify-json.rb  -j input.json  -o output.json -k size -v 256mb --verbose
Before change
size: 512mb
name: ed-userdata
image: ubuntu-14-04-x64
region: sfo1
ssh_keys: 
backups: false
user_data: 
ipv6: false
private_networking: true
After change
size: 256mb
name: ed-userdata
image: ubuntu-14-04-x64
region: sfo1
ssh_keys: 
backups: false
user_data: 
ipv6: false
private_networking: true


$ jq .size input.json ; jq .size output.json 
"512mb"
"256mb"
}
